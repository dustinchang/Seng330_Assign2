// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: invest.proto

#ifndef PROTOBUF_invest_2eproto__INCLUDED
#define PROTOBUF_invest_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace invest {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_invest_2eproto();
void protobuf_AssignDesc_invest_2eproto();
void protobuf_ShutdownFile_invest_2eproto();

class Investment;
class Portfolio;

// ===================================================================

class Investment : public ::google::protobuf::Message {
 public:
  Investment();
  virtual ~Investment();

  Investment(const Investment& from);

  inline Investment& operator=(const Investment& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Investment& default_instance();

  void Swap(Investment* other);

  // implements Message ----------------------------------------------

  inline Investment* New() const { return New(NULL); }

  Investment* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Investment& from);
  void MergeFrom(const Investment& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Investment* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string iname = 1;
  void clear_iname();
  static const int kInameFieldNumber = 1;
  const ::std::string& iname() const;
  void set_iname(const ::std::string& value);
  void set_iname(const char* value);
  void set_iname(const char* value, size_t size);
  ::std::string* mutable_iname();
  ::std::string* release_iname();
  void set_allocated_iname(::std::string* iname);

  // optional int32 id = 2;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:invest.Investment)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr iname_;
  ::google::protobuf::int32 id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_invest_2eproto();
  friend void protobuf_AssignDesc_invest_2eproto();
  friend void protobuf_ShutdownFile_invest_2eproto();

  void InitAsDefaultInstance();
  static Investment* default_instance_;
};
// -------------------------------------------------------------------

class Portfolio : public ::google::protobuf::Message {
 public:
  Portfolio();
  virtual ~Portfolio();

  Portfolio(const Portfolio& from);

  inline Portfolio& operator=(const Portfolio& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Portfolio& default_instance();

  void Swap(Portfolio* other);

  // implements Message ----------------------------------------------

  inline Portfolio* New() const { return New(NULL); }

  Portfolio* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Portfolio& from);
  void MergeFrom(const Portfolio& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Portfolio* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .invest.Investment index = 1;
  int index_size() const;
  void clear_index();
  static const int kIndexFieldNumber = 1;
  const ::invest::Investment& index(int index) const;
  ::invest::Investment* mutable_index(int index);
  ::invest::Investment* add_index();
  ::google::protobuf::RepeatedPtrField< ::invest::Investment >*
      mutable_index();
  const ::google::protobuf::RepeatedPtrField< ::invest::Investment >&
      index() const;

  // @@protoc_insertion_point(class_scope:invest.Portfolio)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::invest::Investment > index_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_invest_2eproto();
  friend void protobuf_AssignDesc_invest_2eproto();
  friend void protobuf_ShutdownFile_invest_2eproto();

  void InitAsDefaultInstance();
  static Portfolio* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Investment

// optional string iname = 1;
inline void Investment::clear_iname() {
  iname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Investment::iname() const {
  // @@protoc_insertion_point(field_get:invest.Investment.iname)
  return iname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Investment::set_iname(const ::std::string& value) {
  
  iname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:invest.Investment.iname)
}
inline void Investment::set_iname(const char* value) {
  
  iname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:invest.Investment.iname)
}
inline void Investment::set_iname(const char* value, size_t size) {
  
  iname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:invest.Investment.iname)
}
inline ::std::string* Investment::mutable_iname() {
  
  // @@protoc_insertion_point(field_mutable:invest.Investment.iname)
  return iname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Investment::release_iname() {
  
  return iname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Investment::set_allocated_iname(::std::string* iname) {
  if (iname != NULL) {
    
  } else {
    
  }
  iname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), iname);
  // @@protoc_insertion_point(field_set_allocated:invest.Investment.iname)
}

// optional int32 id = 2;
inline void Investment::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 Investment::id() const {
  // @@protoc_insertion_point(field_get:invest.Investment.id)
  return id_;
}
inline void Investment::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:invest.Investment.id)
}

// -------------------------------------------------------------------

// Portfolio

// repeated .invest.Investment index = 1;
inline int Portfolio::index_size() const {
  return index_.size();
}
inline void Portfolio::clear_index() {
  index_.Clear();
}
inline const ::invest::Investment& Portfolio::index(int index) const {
  // @@protoc_insertion_point(field_get:invest.Portfolio.index)
  return index_.Get(index);
}
inline ::invest::Investment* Portfolio::mutable_index(int index) {
  // @@protoc_insertion_point(field_mutable:invest.Portfolio.index)
  return index_.Mutable(index);
}
inline ::invest::Investment* Portfolio::add_index() {
  // @@protoc_insertion_point(field_add:invest.Portfolio.index)
  return index_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::invest::Investment >*
Portfolio::mutable_index() {
  // @@protoc_insertion_point(field_mutable_list:invest.Portfolio.index)
  return &index_;
}
inline const ::google::protobuf::RepeatedPtrField< ::invest::Investment >&
Portfolio::index() const {
  // @@protoc_insertion_point(field_list:invest.Portfolio.index)
  return index_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace invest

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_invest_2eproto__INCLUDED
