// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: invest.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "invest.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace invest {

namespace {

const ::google::protobuf::Descriptor* Investment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Investment_reflection_ = NULL;
const ::google::protobuf::Descriptor* Portfolio_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Portfolio_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_invest_2eproto() {
  protobuf_AddDesc_invest_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "invest.proto");
  GOOGLE_CHECK(file != NULL);
  Investment_descriptor_ = file->message_type(0);
  static const int Investment_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Investment, iname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Investment, id_),
  };
  Investment_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Investment_descriptor_,
      Investment::default_instance_,
      Investment_offsets_,
      -1,
      -1,
      -1,
      sizeof(Investment),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Investment, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Investment, _is_default_instance_));
  Portfolio_descriptor_ = file->message_type(1);
  static const int Portfolio_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Portfolio, index_),
  };
  Portfolio_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Portfolio_descriptor_,
      Portfolio::default_instance_,
      Portfolio_offsets_,
      -1,
      -1,
      -1,
      sizeof(Portfolio),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Portfolio, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Portfolio, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_invest_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Investment_descriptor_, &Investment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Portfolio_descriptor_, &Portfolio::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_invest_2eproto() {
  delete Investment::default_instance_;
  delete Investment_reflection_;
  delete Portfolio::default_instance_;
  delete Portfolio_reflection_;
}

void protobuf_AddDesc_invest_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014invest.proto\022\006invest\"\'\n\nInvestment\022\r\n\005"
    "iname\030\001 \001(\t\022\n\n\002id\030\002 \001(\005\".\n\tPortfolio\022!\n\005"
    "index\030\001 \003(\0132\022.invest.Investmentb\006proto3", 119);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "invest.proto", &protobuf_RegisterTypes);
  Investment::default_instance_ = new Investment();
  Portfolio::default_instance_ = new Portfolio();
  Investment::default_instance_->InitAsDefaultInstance();
  Portfolio::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_invest_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_invest_2eproto {
  StaticDescriptorInitializer_invest_2eproto() {
    protobuf_AddDesc_invest_2eproto();
  }
} static_descriptor_initializer_invest_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Investment::kInameFieldNumber;
const int Investment::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Investment::Investment()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:invest.Investment)
}

void Investment::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Investment::Investment(const Investment& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:invest.Investment)
}

void Investment::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  iname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0;
}

Investment::~Investment() {
  // @@protoc_insertion_point(destructor:invest.Investment)
  SharedDtor();
}

void Investment::SharedDtor() {
  iname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Investment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Investment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Investment_descriptor_;
}

const Investment& Investment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_invest_2eproto();
  return *default_instance_;
}

Investment* Investment::default_instance_ = NULL;

Investment* Investment::New(::google::protobuf::Arena* arena) const {
  Investment* n = new Investment;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Investment::Clear() {
  iname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0;
}

bool Investment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:invest.Investment)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string iname = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_iname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->iname().data(), this->iname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "invest.Investment.iname"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (tag == 16) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:invest.Investment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:invest.Investment)
  return false;
#undef DO_
}

void Investment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:invest.Investment)
  // optional string iname = 1;
  if (this->iname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->iname().data(), this->iname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "invest.Investment.iname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->iname(), output);
  }

  // optional int32 id = 2;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // @@protoc_insertion_point(serialize_end:invest.Investment)
}

::google::protobuf::uint8* Investment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:invest.Investment)
  // optional string iname = 1;
  if (this->iname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->iname().data(), this->iname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "invest.Investment.iname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->iname(), target);
  }

  // optional int32 id = 2;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:invest.Investment)
  return target;
}

int Investment::ByteSize() const {
  int total_size = 0;

  // optional string iname = 1;
  if (this->iname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->iname());
  }

  // optional int32 id = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Investment::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Investment* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Investment>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Investment::MergeFrom(const Investment& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.iname().size() > 0) {

    iname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.iname_);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void Investment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Investment::CopyFrom(const Investment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Investment::IsInitialized() const {

  return true;
}

void Investment::Swap(Investment* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Investment::InternalSwap(Investment* other) {
  iname_.Swap(&other->iname_);
  std::swap(id_, other->id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Investment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Investment_descriptor_;
  metadata.reflection = Investment_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Investment

// optional string iname = 1;
void Investment::clear_iname() {
  iname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Investment::iname() const {
  // @@protoc_insertion_point(field_get:invest.Investment.iname)
  return iname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Investment::set_iname(const ::std::string& value) {
  
  iname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:invest.Investment.iname)
}
 void Investment::set_iname(const char* value) {
  
  iname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:invest.Investment.iname)
}
 void Investment::set_iname(const char* value, size_t size) {
  
  iname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:invest.Investment.iname)
}
 ::std::string* Investment::mutable_iname() {
  
  // @@protoc_insertion_point(field_mutable:invest.Investment.iname)
  return iname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Investment::release_iname() {
  
  return iname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Investment::set_allocated_iname(::std::string* iname) {
  if (iname != NULL) {
    
  } else {
    
  }
  iname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), iname);
  // @@protoc_insertion_point(field_set_allocated:invest.Investment.iname)
}

// optional int32 id = 2;
void Investment::clear_id() {
  id_ = 0;
}
 ::google::protobuf::int32 Investment::id() const {
  // @@protoc_insertion_point(field_get:invest.Investment.id)
  return id_;
}
 void Investment::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:invest.Investment.id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Portfolio::kIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Portfolio::Portfolio()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:invest.Portfolio)
}

void Portfolio::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Portfolio::Portfolio(const Portfolio& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:invest.Portfolio)
}

void Portfolio::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

Portfolio::~Portfolio() {
  // @@protoc_insertion_point(destructor:invest.Portfolio)
  SharedDtor();
}

void Portfolio::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Portfolio::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Portfolio::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Portfolio_descriptor_;
}

const Portfolio& Portfolio::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_invest_2eproto();
  return *default_instance_;
}

Portfolio* Portfolio::default_instance_ = NULL;

Portfolio* Portfolio::New(::google::protobuf::Arena* arena) const {
  Portfolio* n = new Portfolio;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Portfolio::Clear() {
  index_.Clear();
}

bool Portfolio::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:invest.Portfolio)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .invest.Investment index = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_index:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_index()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_index;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:invest.Portfolio)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:invest.Portfolio)
  return false;
#undef DO_
}

void Portfolio::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:invest.Portfolio)
  // repeated .invest.Investment index = 1;
  for (unsigned int i = 0, n = this->index_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->index(i), output);
  }

  // @@protoc_insertion_point(serialize_end:invest.Portfolio)
}

::google::protobuf::uint8* Portfolio::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:invest.Portfolio)
  // repeated .invest.Investment index = 1;
  for (unsigned int i = 0, n = this->index_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->index(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:invest.Portfolio)
  return target;
}

int Portfolio::ByteSize() const {
  int total_size = 0;

  // repeated .invest.Investment index = 1;
  total_size += 1 * this->index_size();
  for (int i = 0; i < this->index_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->index(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Portfolio::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Portfolio* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Portfolio>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Portfolio::MergeFrom(const Portfolio& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  index_.MergeFrom(from.index_);
}

void Portfolio::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Portfolio::CopyFrom(const Portfolio& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Portfolio::IsInitialized() const {

  return true;
}

void Portfolio::Swap(Portfolio* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Portfolio::InternalSwap(Portfolio* other) {
  index_.UnsafeArenaSwap(&other->index_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Portfolio::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Portfolio_descriptor_;
  metadata.reflection = Portfolio_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Portfolio

// repeated .invest.Investment index = 1;
int Portfolio::index_size() const {
  return index_.size();
}
void Portfolio::clear_index() {
  index_.Clear();
}
const ::invest::Investment& Portfolio::index(int index) const {
  // @@protoc_insertion_point(field_get:invest.Portfolio.index)
  return index_.Get(index);
}
::invest::Investment* Portfolio::mutable_index(int index) {
  // @@protoc_insertion_point(field_mutable:invest.Portfolio.index)
  return index_.Mutable(index);
}
::invest::Investment* Portfolio::add_index() {
  // @@protoc_insertion_point(field_add:invest.Portfolio.index)
  return index_.Add();
}
::google::protobuf::RepeatedPtrField< ::invest::Investment >*
Portfolio::mutable_index() {
  // @@protoc_insertion_point(field_mutable_list:invest.Portfolio.index)
  return &index_;
}
const ::google::protobuf::RepeatedPtrField< ::invest::Investment >&
Portfolio::index() const {
  // @@protoc_insertion_point(field_list:invest.Portfolio.index)
  return index_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace invest

// @@protoc_insertion_point(global_scope)
