// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: invest.proto

#ifndef PROTOBUF_invest_2eproto__INCLUDED
#define PROTOBUF_invest_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace invest {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_invest_2eproto();
void protobuf_AssignDesc_invest_2eproto();
void protobuf_ShutdownFile_invest_2eproto();

class MutualFund;
class Stock;

// ===================================================================

class Stock : public ::google::protobuf::Message {
 public:
  Stock();
  virtual ~Stock();

  Stock(const Stock& from);

  inline Stock& operator=(const Stock& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Stock& default_instance();

  void Swap(Stock* other);

  // implements Message ----------------------------------------------

  inline Stock* New() const { return New(NULL); }

  Stock* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Stock& from);
  void MergeFrom(const Stock& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Stock* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string sname = 1;
  bool has_sname() const;
  void clear_sname();
  static const int kSnameFieldNumber = 1;
  const ::std::string& sname() const;
  void set_sname(const ::std::string& value);
  void set_sname(const char* value);
  void set_sname(const char* value, size_t size);
  ::std::string* mutable_sname();
  ::std::string* release_sname();
  void set_allocated_sname(::std::string* sname);

  // @@protoc_insertion_point(class_scope:invest.Stock)
 private:
  inline void set_has_sname();
  inline void clear_has_sname();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr sname_;
  friend void  protobuf_AddDesc_invest_2eproto();
  friend void protobuf_AssignDesc_invest_2eproto();
  friend void protobuf_ShutdownFile_invest_2eproto();

  void InitAsDefaultInstance();
  static Stock* default_instance_;
};
// -------------------------------------------------------------------

class MutualFund : public ::google::protobuf::Message {
 public:
  MutualFund();
  virtual ~MutualFund();

  MutualFund(const MutualFund& from);

  inline MutualFund& operator=(const MutualFund& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MutualFund& default_instance();

  void Swap(MutualFund* other);

  // implements Message ----------------------------------------------

  inline MutualFund* New() const { return New(NULL); }

  MutualFund* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MutualFund& from);
  void MergeFrom(const MutualFund& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MutualFund* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string fname = 1;
  bool has_fname() const;
  void clear_fname();
  static const int kFnameFieldNumber = 1;
  const ::std::string& fname() const;
  void set_fname(const ::std::string& value);
  void set_fname(const char* value);
  void set_fname(const char* value, size_t size);
  ::std::string* mutable_fname();
  ::std::string* release_fname();
  void set_allocated_fname(::std::string* fname);

  // @@protoc_insertion_point(class_scope:invest.MutualFund)
 private:
  inline void set_has_fname();
  inline void clear_has_fname();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr fname_;
  friend void  protobuf_AddDesc_invest_2eproto();
  friend void protobuf_AssignDesc_invest_2eproto();
  friend void protobuf_ShutdownFile_invest_2eproto();

  void InitAsDefaultInstance();
  static MutualFund* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Stock

// optional string sname = 1;
inline bool Stock::has_sname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Stock::set_has_sname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Stock::clear_has_sname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Stock::clear_sname() {
  sname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sname();
}
inline const ::std::string& Stock::sname() const {
  // @@protoc_insertion_point(field_get:invest.Stock.sname)
  return sname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Stock::set_sname(const ::std::string& value) {
  set_has_sname();
  sname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:invest.Stock.sname)
}
inline void Stock::set_sname(const char* value) {
  set_has_sname();
  sname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:invest.Stock.sname)
}
inline void Stock::set_sname(const char* value, size_t size) {
  set_has_sname();
  sname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:invest.Stock.sname)
}
inline ::std::string* Stock::mutable_sname() {
  set_has_sname();
  // @@protoc_insertion_point(field_mutable:invest.Stock.sname)
  return sname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Stock::release_sname() {
  clear_has_sname();
  return sname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Stock::set_allocated_sname(::std::string* sname) {
  if (sname != NULL) {
    set_has_sname();
  } else {
    clear_has_sname();
  }
  sname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sname);
  // @@protoc_insertion_point(field_set_allocated:invest.Stock.sname)
}

// -------------------------------------------------------------------

// MutualFund

// optional string fname = 1;
inline bool MutualFund::has_fname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MutualFund::set_has_fname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MutualFund::clear_has_fname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MutualFund::clear_fname() {
  fname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fname();
}
inline const ::std::string& MutualFund::fname() const {
  // @@protoc_insertion_point(field_get:invest.MutualFund.fname)
  return fname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MutualFund::set_fname(const ::std::string& value) {
  set_has_fname();
  fname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:invest.MutualFund.fname)
}
inline void MutualFund::set_fname(const char* value) {
  set_has_fname();
  fname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:invest.MutualFund.fname)
}
inline void MutualFund::set_fname(const char* value, size_t size) {
  set_has_fname();
  fname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:invest.MutualFund.fname)
}
inline ::std::string* MutualFund::mutable_fname() {
  set_has_fname();
  // @@protoc_insertion_point(field_mutable:invest.MutualFund.fname)
  return fname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MutualFund::release_fname() {
  clear_has_fname();
  return fname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MutualFund::set_allocated_fname(::std::string* fname) {
  if (fname != NULL) {
    set_has_fname();
  } else {
    clear_has_fname();
  }
  fname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fname);
  // @@protoc_insertion_point(field_set_allocated:invest.MutualFund.fname)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace invest

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_invest_2eproto__INCLUDED
