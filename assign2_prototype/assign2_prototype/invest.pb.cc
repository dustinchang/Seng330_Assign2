// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: invest.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "invest.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace invest {

namespace {

const ::google::protobuf::Descriptor* Stock_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Stock_reflection_ = NULL;
const ::google::protobuf::Descriptor* MutualFund_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MutualFund_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_invest_2eproto() {
  protobuf_AddDesc_invest_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "invest.proto");
  GOOGLE_CHECK(file != NULL);
  Stock_descriptor_ = file->message_type(0);
  static const int Stock_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stock, sname_),
  };
  Stock_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Stock_descriptor_,
      Stock::default_instance_,
      Stock_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stock, _has_bits_[0]),
      -1,
      -1,
      sizeof(Stock),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stock, _internal_metadata_),
      -1);
  MutualFund_descriptor_ = file->message_type(1);
  static const int MutualFund_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MutualFund, fname_),
  };
  MutualFund_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MutualFund_descriptor_,
      MutualFund::default_instance_,
      MutualFund_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MutualFund, _has_bits_[0]),
      -1,
      -1,
      sizeof(MutualFund),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MutualFund, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_invest_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Stock_descriptor_, &Stock::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MutualFund_descriptor_, &MutualFund::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_invest_2eproto() {
  delete Stock::default_instance_;
  delete Stock_reflection_;
  delete MutualFund::default_instance_;
  delete MutualFund_reflection_;
}

void protobuf_AddDesc_invest_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014invest.proto\022\006invest\"\026\n\005Stock\022\r\n\005sname"
    "\030\001 \001(\t\"\033\n\nMutualFund\022\r\n\005fname\030\001 \001(\t", 75);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "invest.proto", &protobuf_RegisterTypes);
  Stock::default_instance_ = new Stock();
  MutualFund::default_instance_ = new MutualFund();
  Stock::default_instance_->InitAsDefaultInstance();
  MutualFund::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_invest_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_invest_2eproto {
  StaticDescriptorInitializer_invest_2eproto() {
    protobuf_AddDesc_invest_2eproto();
  }
} static_descriptor_initializer_invest_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Stock::kSnameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Stock::Stock()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:invest.Stock)
}

void Stock::InitAsDefaultInstance() {
}

Stock::Stock(const Stock& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:invest.Stock)
}

void Stock::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  sname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Stock::~Stock() {
  // @@protoc_insertion_point(destructor:invest.Stock)
  SharedDtor();
}

void Stock::SharedDtor() {
  sname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Stock::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Stock::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Stock_descriptor_;
}

const Stock& Stock::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_invest_2eproto();
  return *default_instance_;
}

Stock* Stock::default_instance_ = NULL;

Stock* Stock::New(::google::protobuf::Arena* arena) const {
  Stock* n = new Stock;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Stock::Clear() {
  if (has_sname()) {
    sname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Stock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:invest.Stock)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string sname = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sname().data(), this->sname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "invest.Stock.sname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:invest.Stock)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:invest.Stock)
  return false;
#undef DO_
}

void Stock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:invest.Stock)
  // optional string sname = 1;
  if (has_sname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sname().data(), this->sname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "invest.Stock.sname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sname(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:invest.Stock)
}

::google::protobuf::uint8* Stock::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:invest.Stock)
  // optional string sname = 1;
  if (has_sname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sname().data(), this->sname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "invest.Stock.sname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sname(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:invest.Stock)
  return target;
}

int Stock::ByteSize() const {
  int total_size = 0;

  // optional string sname = 1;
  if (has_sname()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sname());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Stock::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Stock* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Stock>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Stock::MergeFrom(const Stock& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sname()) {
      set_has_sname();
      sname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sname_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Stock::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Stock::CopyFrom(const Stock& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Stock::IsInitialized() const {

  return true;
}

void Stock::Swap(Stock* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Stock::InternalSwap(Stock* other) {
  sname_.Swap(&other->sname_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Stock::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Stock_descriptor_;
  metadata.reflection = Stock_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Stock

// optional string sname = 1;
bool Stock::has_sname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Stock::set_has_sname() {
  _has_bits_[0] |= 0x00000001u;
}
void Stock::clear_has_sname() {
  _has_bits_[0] &= ~0x00000001u;
}
void Stock::clear_sname() {
  sname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sname();
}
 const ::std::string& Stock::sname() const {
  // @@protoc_insertion_point(field_get:invest.Stock.sname)
  return sname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Stock::set_sname(const ::std::string& value) {
  set_has_sname();
  sname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:invest.Stock.sname)
}
 void Stock::set_sname(const char* value) {
  set_has_sname();
  sname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:invest.Stock.sname)
}
 void Stock::set_sname(const char* value, size_t size) {
  set_has_sname();
  sname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:invest.Stock.sname)
}
 ::std::string* Stock::mutable_sname() {
  set_has_sname();
  // @@protoc_insertion_point(field_mutable:invest.Stock.sname)
  return sname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Stock::release_sname() {
  clear_has_sname();
  return sname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Stock::set_allocated_sname(::std::string* sname) {
  if (sname != NULL) {
    set_has_sname();
  } else {
    clear_has_sname();
  }
  sname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sname);
  // @@protoc_insertion_point(field_set_allocated:invest.Stock.sname)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MutualFund::kFnameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MutualFund::MutualFund()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:invest.MutualFund)
}

void MutualFund::InitAsDefaultInstance() {
}

MutualFund::MutualFund(const MutualFund& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:invest.MutualFund)
}

void MutualFund::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  fname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MutualFund::~MutualFund() {
  // @@protoc_insertion_point(destructor:invest.MutualFund)
  SharedDtor();
}

void MutualFund::SharedDtor() {
  fname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void MutualFund::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MutualFund::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MutualFund_descriptor_;
}

const MutualFund& MutualFund::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_invest_2eproto();
  return *default_instance_;
}

MutualFund* MutualFund::default_instance_ = NULL;

MutualFund* MutualFund::New(::google::protobuf::Arena* arena) const {
  MutualFund* n = new MutualFund;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MutualFund::Clear() {
  if (has_fname()) {
    fname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MutualFund::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:invest.MutualFund)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string fname = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fname().data(), this->fname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "invest.MutualFund.fname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:invest.MutualFund)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:invest.MutualFund)
  return false;
#undef DO_
}

void MutualFund::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:invest.MutualFund)
  // optional string fname = 1;
  if (has_fname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fname().data(), this->fname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "invest.MutualFund.fname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->fname(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:invest.MutualFund)
}

::google::protobuf::uint8* MutualFund::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:invest.MutualFund)
  // optional string fname = 1;
  if (has_fname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fname().data(), this->fname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "invest.MutualFund.fname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->fname(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:invest.MutualFund)
  return target;
}

int MutualFund::ByteSize() const {
  int total_size = 0;

  // optional string fname = 1;
  if (has_fname()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->fname());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MutualFund::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MutualFund* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MutualFund>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MutualFund::MergeFrom(const MutualFund& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fname()) {
      set_has_fname();
      fname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fname_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MutualFund::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MutualFund::CopyFrom(const MutualFund& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MutualFund::IsInitialized() const {

  return true;
}

void MutualFund::Swap(MutualFund* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MutualFund::InternalSwap(MutualFund* other) {
  fname_.Swap(&other->fname_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MutualFund::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MutualFund_descriptor_;
  metadata.reflection = MutualFund_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MutualFund

// optional string fname = 1;
bool MutualFund::has_fname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MutualFund::set_has_fname() {
  _has_bits_[0] |= 0x00000001u;
}
void MutualFund::clear_has_fname() {
  _has_bits_[0] &= ~0x00000001u;
}
void MutualFund::clear_fname() {
  fname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fname();
}
 const ::std::string& MutualFund::fname() const {
  // @@protoc_insertion_point(field_get:invest.MutualFund.fname)
  return fname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MutualFund::set_fname(const ::std::string& value) {
  set_has_fname();
  fname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:invest.MutualFund.fname)
}
 void MutualFund::set_fname(const char* value) {
  set_has_fname();
  fname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:invest.MutualFund.fname)
}
 void MutualFund::set_fname(const char* value, size_t size) {
  set_has_fname();
  fname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:invest.MutualFund.fname)
}
 ::std::string* MutualFund::mutable_fname() {
  set_has_fname();
  // @@protoc_insertion_point(field_mutable:invest.MutualFund.fname)
  return fname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MutualFund::release_fname() {
  clear_has_fname();
  return fname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MutualFund::set_allocated_fname(::std::string* fname) {
  if (fname != NULL) {
    set_has_fname();
  } else {
    clear_has_fname();
  }
  fname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fname);
  // @@protoc_insertion_point(field_set_allocated:invest.MutualFund.fname)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace invest

// @@protoc_insertion_point(global_scope)
